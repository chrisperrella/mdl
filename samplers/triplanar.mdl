mdl 1.7;

import ::anno::*;
import ::base::*;
import ::state::*;
import ::tex::*;
import ::math::*;
module [[
    anno::version( 0, 0, 1),
    anno::display_name("Triplanar Nodes")
]];

export float3 tbn(
	float3 raw_normal,
	uniform int uv_index = 0
)[[ anno::hidden() ]]{
	float3 normal 	 = raw_normal * 2.f - 1.f;
	float2 normal_xy = float2( normal.x, normal.y );
	float normal_z   = math::sqrt( math::saturate( 1.f - math::dot( normal_xy, normal_xy ) ) );
	normal.z 		 = normal_z;

	base::texture_coordinate_info coord_info_uvw = base::coordinate_source( coordinate_system:
																			base::texture_coordinate_uvw,
																			texture_space: uv_index );
	float3 T = coord_info_uvw.tangent_u;
	float3 B = coord_info_uvw.tangent_v;
	float3 N = state::normal();

	normal = normal.x * T + normal.y * B + normal.z * N;
	return math::normalize( normal );
}

export float3 reoriented_normal_map(
    float3 normal,
    float3 detail
)[[ anno::hidden() ]]{
    normal += float3( 0.f, 0.f, 1.f );
    detail *= float3( -1.f, -1.f, 1.f );
    return normal * math::dot( normal, detail ) / normal.z - detail; 
}

export float3 unpack_normal(
    float3 normal
)[[ anno::hidden() ]]{
    normal = normal * 2.f - 1.f;
    float normal_z = math::sqrt( 1.f - normal.x * normal.x - normal.y * normal.y );
    normal.z = normal_z;
    return normal;
}

export float3 worldspace_coordinates( 
    float3 uv_tiling = float3( 1.f )
)[[ anno::hidden() ]]{
    float3 position = state::position();
    return position * uv_tiling;
}

export float3 triplanar_weights(
)[[ anno::hidden() ]]{
    float3 blend = math::abs( state::geometry_normal() );
    blend        = math::max( blend - 0.2, 0 );
    blend       /= math::dot( blend, float3( 1.f ) );
    return blend;
}

export color triplanar_color(
    uniform texture_2d tex
    [[anno::display_name("Texture")]],
    float3 uv_tiling = float3( 1.0f )
    [[anno::display_name("Tiling")]]
)
[[ anno::display_name("TriPlanar Color"),
   anno::thumbnail(".thumbs/triplanar.png"),
   anno::in_group("TriPlanar"),
   anno::author("Chris Perrella")
   ]]
{
    float3 uvs, weights;
    weights         = triplanar_weights();

    uvs             = worldspace_coordinates( uv_tiling );
    float2 uv_xy    = float2( uvs.x, uvs.y );
    float2 uv_zy    = float2( uvs.z, uvs.y );
    float2 uv_xz    = float2( uvs.x, uvs.z );

    color color_x   = tex::texture_isvalid( tex ) ? tex::lookup_color( tex, uv_zy ) : color( 0.5f );
    color color_y   = tex::texture_isvalid( tex ) ? tex::lookup_color( tex, uv_xz ) : color( 0.5f );
	color color_z   = tex::texture_isvalid( tex ) ? tex::lookup_color( tex, uv_xy ) : color( 0.5f );                               
    
    color  final_color = color_z * weights.z + 
                         color_x * weights.x + 
                         color_y * weights.y;

    return final_color;
}

export float4 triplanar_float4(
    uniform texture_2d tex
    [[anno::display_name("Texture")]],
    float3 uv_tiling = float3(1.0f)
    [[anno::display_name("Tiling")]]
)
[[ anno::display_name("TriPlanar Float4"),
   anno::thumbnail(".thumbs/triplanar.png"),
   anno::in_group("TriPlanar"),
   anno::author("Chris Perrella")]]
{
    float3 uvs, weights;
    weights         = triplanar_weights();

    uvs             = worldspace_coordinates( uv_tiling );
    float2 uv_xy    = float2( uvs.x, uvs.y );
    float2 uv_zy    = float2( uvs.z, uvs.y );
    float2 uv_xz    = float2( uvs.x, uvs.z );

    float4 color_x   = tex::texture_isvalid( tex ) ? tex::lookup_float4( tex, uv_zy ) : float4( 0.5f );
    float4 color_y   = tex::texture_isvalid( tex ) ? tex::lookup_float4( tex, uv_xz ) : float4( 0.5f );
    float4 color_z   = tex::texture_isvalid( tex ) ? tex::lookup_float4( tex, uv_xy ) : float4( 0.5f );                               
    
    float4  final_color = color_z * weights.z + 
                          color_x * weights.x + 
                          color_y * weights.y;

    return final_color;
}

export float3 triplanar_normal(
    uniform texture_2d tex 
    [[anno::display_name("Texture"),
      anno::usage("normal") ]],
    float3 uv_tiling = float3(1.0f)    
    [[anno::display_name("Tiling")]]
)
[[ anno::display_name("TriPlanar Normal"),
   anno::thumbnail(".thumbs/triplanar.png"),
   anno::in_group("TriPlanar"),
   anno::author("Chris Perrella")]]
{
    float3 uvs, weights;
    uvs             = worldspace_coordinates( uv_tiling );
    float2 uv_xy    = float2( uvs.x, uvs.y );
    float2 uv_zy    = float2( uvs.z, uvs.y );
    float2 uv_xz    = float2( uvs.x, uvs.z );

    weights = triplanar_weights();

    float3 normal_x = tex::texture_isvalid( tex ) ? tex::lookup_float3( tex, uv_zy ) : float3( 0.5f, 0.5f, 1.0f );   
    normal_x = unpack_normal( normal_x );
    float3 normal_y = tex::texture_isvalid( tex ) ? tex::lookup_float3( tex, uv_xz ) : float3( 0.5f, 0.5f, 1.0f );    
    normal_y = unpack_normal( normal_y );
    float3 normal_z = tex::texture_isvalid( tex ) ? tex::lookup_float3( tex, uv_xy ) : float3( 0.5f, 0.5f, 1.0f );   
    normal_z = unpack_normal( normal_z );

    float3 absolute_normal = math::abs( state::normal() );
    float3 world_normal_x = float3( state::normal().z, state::normal().y, absolute_normal.x );
    float3 world_normal_y = float3( state::normal().x, state::normal().z, absolute_normal.y );
    float3 world_normal_z = float3( state::normal().x, state::normal().y, absolute_normal.z );

    float3 ts_normal_x = reoriented_normal_map( world_normal_x, normal_x );
    float3 ts_normal_y = reoriented_normal_map( world_normal_y, normal_y );
    float3 ts_normal_z = reoriented_normal_map( world_normal_z, normal_z );

    float3 axis = math::sign( state::normal() );

    ts_normal_x.z *= axis.x;
    ts_normal_y.z *= axis.y;
    ts_normal_z.z *= axis.z;
   
    float3 final_normal = math::normalize( ts_normal_x * weights.x + 
                                           ts_normal_y * weights.y + 
                                           ts_normal_z * weights.z + 
                                           state::normal() );

    return final_normal;
}